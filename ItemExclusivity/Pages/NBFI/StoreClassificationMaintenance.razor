@page "/nbfi/storeclassification"

@using ItemExclusivity.Data
@using ItemExclusivity.Models
@inject IJSRuntime IJSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IMyDataConnection _data
@using Microsoft.AspNetCore.Components.Web
@using System.Diagnostics
@using NPOI.XSSF.UserModel
@using System.Collections.Generic;
@using NPOI.SS.UserModel
@using NPOI.HSSF.UserModel
@using System.IO

<style>
    table {
        width: 100%;
    }

    tr td {
        font-size: 14px;
    }

        tr td a {
            text-decoration: none
        }

            tr td a:hover {
                color: #00A3AD;
                font-weight: bold;
            }

    thead tr th {
        padding: 4px 6px;
    }

    thead tr:hover {
        background-color: white !important;
    }

    tbody tr td {
        padding: 4px 6px;
        border-top: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
    }

    tbody tr:hover {
        background-color: #f8d7da;
        color: black;
        font-weight: bold;
    }

    td button {
        border: none;
        background-color: transparent;
    }

        td button:hover {
            text-decoration: underline;
            font-weight: bold;
        }

    .submit-button {
        border-radius: 2px;
    }

    .label-button {
        color: #00A3AD !important;
        cursor: pointer;
        border-radius: 2px;
    }

        .label-button:hover {
            color: white !important;
        }

    .remove-button {
        border: 1px solid #AA0061;
        background-color: white;
        padding: 2px 6px;
        color: #AA0061;
    }

        .remove-button:hover {
            color: #FFFFFF;
            background-color: #AA0061;
            border: 1px solid #AA0061;
        }

    .clear-button {
        margin-top: auto;
        width: fit-content;
        border: 2px solid #4B5563;
        background-color: #4B5563;
        padding: 1px 16px;
        color: white;
        "
    }

        .clear-button:hover {
            background-color: white;
            color: #4B5563;
        }

    .remove-selected-button {
        border: 2px solid #AA0061;
        background-color: white;
        padding: 2px 12px;
        color: #AA0061;
        border-radius: 2px;
    }

        .remove-selected-button:hover {
            color: white;
            background-color: #AA0061;
        }


    .pagination-number {
        border-radius: 2px;
        width: 30px;
        height: 30px;
        margin: 0px 10px;
        border: 1px solid #00A3AD;
        color: #00A3AD;
        background-color: none;
    }

    .pagination-next {
        background-color: #fff;
        border: none;
    }

        .pagination-next .icon-next {
            height: 25px;
            width: 20px;
        }

    .pagination-prev {
        background-color: #fff;
        border: none;
    }

        .pagination-prev .icon-prev {
            height: 25px;
            width: 20px;
        }


    .select-size {
        color: #00A3AD;
        margin-right: 10px;
        border: 1px solid #00A3AD;
    }

    button.active {
        background-color: #00A3AD;
        color: #ffffff;
    }

    .notification {
        padding: 15px;
        margin: 10px;
        border-radius: 5px;
        font-size: 16px;
        position: absolute; /* Set position to absolute */
        right: 20px; /* Position from the right */
        bottom: 20px; /* Position from the top */
        width: 350px; /* Set a width for the notification */
        z-index: 1000; /* Ensure it appears above other content */
    }

    .success {
        background-color: #d4edda;
        color: #00A3AD;
        border: 1px solid #c3e6cb;
    }

    .error {
        background-color: #f8d7da;
        color: #AA0061;
        border: 1px solid #f5c6cb;
    }

    .notification strong {
        margin-right: 5px;
    }

    .loading-section {
        text-align: center;
        align-content: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 50px 0px;
    }
</style>

<div class="container">
    <div class="form-top"></div>
    <div class="form-content" style="padding: 20px;">
        <div class="grid grid-cols-2">
            <div class="col-span-1">
                <p class="upload-memorandum">
                    <span class="upload">Store Classification </span>
                    <span class="memorandum">Maintenance</span>
                </p>
            </div>



            <div class="col-span-1">
                <div class="col-span-1">
                    <button class="submit-button" @onclick="OpenModal">
                        <svg xmlns="http://www.w3.org/2000/svg" class="ionicon" height="20" width="20" viewBox="0 0 512 512"><path d="M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="32" /><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M256 176v160M336 256H176" /></svg>Add Branch
                    </button>

                    <InputFile OnChange="@HandleFileChangeSol" accept=".xls,.xlsx" multiple="false" name="file" id="file" hidden />
                    <label class="submit-button label-button" style="padding: 4px 20px 3px 20px;" for="file">
                        <svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 1.25C12.2189 1.25 12.427 1.34567 12.5694 1.51191L15.5694 5.01191C15.839 5.3264 15.8026 5.79988 15.4881 6.06944C15.1736 6.33901 14.7001 6.30259 14.4306 5.98809L12.75 4.02744L12.75 15C12.75 15.4142 12.4142 15.75 12 15.75C11.5858 15.75 11.25 15.4142 11.25 15L11.25 4.02744L9.56944 5.98809C9.29988 6.30259 8.8264 6.33901 8.51191 6.06944C8.19741 5.79988 8.16099 5.3264 8.43056 5.01191L11.4306 1.51191C11.573 1.34567 11.7811 1.25 12 1.25ZM6.99583 8.25196C7.41003 8.24966 7.74768 8.58357 7.74999 8.99778C7.7523 9.41198 7.41838 9.74963 7.00418 9.75194C5.91068 9.75803 5.1356 9.78642 4.54735 9.89448C3.98054 9.99859 3.65246 10.1658 3.40901 10.4092C3.13225 10.686 2.9518 11.0746 2.85315 11.8083C2.75159 12.5637 2.75 13.5648 2.75 15.0002V16.0002C2.75 17.4356 2.75159 18.4367 2.85315 19.1921C2.9518 19.9259 3.13225 20.3144 3.40901 20.5912C3.68577 20.868 4.07434 21.0484 4.80812 21.1471C5.56347 21.2486 6.56458 21.2502 8 21.2502H16C17.4354 21.2502 18.4365 21.2486 19.1919 21.1471C19.9257 21.0484 20.3142 20.868 20.591 20.5912C20.8678 20.3144 21.0482 19.9259 21.1469 19.1921C21.2484 18.4367 21.25 17.4356 21.25 16.0002V15.0002C21.25 13.5648 21.2484 12.5637 21.1469 11.8083C21.0482 11.0746 20.8678 10.686 20.591 10.4092C20.3475 10.1658 20.0195 9.99859 19.4527 9.89448C18.8644 9.78642 18.0893 9.75803 16.9958 9.75194C16.5816 9.74963 16.2477 9.41198 16.25 8.99778C16.2523 8.58357 16.59 8.24966 17.0042 8.25196C18.0857 8.25798 18.9871 8.28387 19.7236 8.41916C20.4816 8.55839 21.1267 8.82363 21.6517 9.34856C22.2536 9.95048 22.5125 10.7084 22.6335 11.6085C22.75 12.4754 22.75 13.5778 22.75 14.9453V16.0551C22.75 17.4227 22.75 18.525 22.6335 19.392C22.5125 20.2921 22.2536 21.0499 21.6517 21.6519C21.0497 22.2538 20.2919 22.5127 19.3918 22.6337C18.5248 22.7503 17.4225 22.7502 16.0549 22.7502H7.94513C6.57754 22.7502 5.47522 22.7503 4.60825 22.6337C3.70814 22.5127 2.95027 22.2538 2.34835 21.6519C1.74643 21.0499 1.48754 20.2921 1.36652 19.392C1.24996 18.525 1.24998 17.4227 1.25 16.0551V14.9453C1.24998 13.5777 1.24996 12.4754 1.36652 11.6085C1.48754 10.7084 1.74643 9.95048 2.34835 9.34856C2.87328 8.82363 3.51835 8.55839 4.27635 8.41916C5.01291 8.28386 5.9143 8.25798 6.99583 8.25196Z" />
                        </svg>
                        Upload
                    </label>

                    <button class="submit-button" @onclick="Template">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentcolor" xmlns="http://www.w3.org/2000/svg">
                            <path fill="none" d="M8 17.5V15.5C8 14.6716 8.67157 14 9.5 14H14.5C15.3284 14 16 14.6716 16 15.5V17.5C16 18.3284 15.3284 19 14.5 19H9.5C8.67157 19 8 18.3284 8 17.5Z" stroke-width="1.5" stroke-linecap="round" />
                            <path fill="currentcolor" stroke="none" d="M8 15.75V17.5C8 17.5852 8.0071 17.6687 8.02074 17.75H6.25C4.86929 17.75 3.75 16.6307 3.75 15.25V10.25C3.75 8.86929 4.86929 7.75 6.25 7.75H17.25C18.6307 7.75 19.75 8.86929 19.75 10.25V15.25C19.75 16.6307 18.6307 17.75 17.25 17.75H15.9793C15.9929 17.6687 16 17.5852 16 17.5V15.75H17.25C17.5261 15.75 17.75 15.5261 17.75 15.25V10.25C17.75 9.97386 17.5261 9.75 17.25 9.75H6.25C5.97386 9.75 5.75 9.97386 5.75 10.25V15.25C5.75 15.5261 5.97386 15.75 6.25 15.75H8ZM10.25 5.25C10.25 4.97386 10.4739 4.75 10.75 4.75H13.25C13.5261 4.75 13.75 4.97386 13.75 5.25V5.75C13.75 6.30228 14.1977 6.75 14.75 6.75C15.3023 6.75 15.75 6.30228 15.75 5.75V5.25C15.75 3.86929 14.6307 2.75 13.25 2.75H10.75C9.36929 2.75 8.25 3.86929 8.25 5.25V5.75C8.25 6.30228 8.69772 6.75 9.25 6.75C9.80228 6.75 10.25 6.30228 10.25 5.75V5.25Z" />
                        </svg>
                        Template
                    </button>
                </div>
                <br />
            </div>
            <br />
            <div class="grid grid-cols-2 col-span-2">
                <div class="col-span-2 d-flex">
                    <!-- CHAIN -->
                    <div style="width: 50%">
                        <label>Chain*</label><br />
                        <select class="select-input" @onchange="OnChainChanged" disabled="@(!string.IsNullOrEmpty(selectedChain))">
                            <option value="">-- Select Chain --</option>
                            <option value="RDS">RDS</option>
                            <option value="SM DEPT. STORE">SM DEPT. STORE</option>
                            <option value="WDS">WDS</option>
                        </select>
                    </div>
                    <div style="width: 30px"></div>
                    <!-- Brand -->
                    <div style="width: 50%">
                        <label>Brand*</label><br />
                        <select class="select-input" @onchange="OnBrandChange" disabled="@(string.IsNullOrEmpty(selectedChain) || !string.IsNullOrEmpty(selectedCategory))">
                            <option value="">-- Select Brand --</option>
                            @foreach (var brand in allbrandsperchain.Where(a => a.chainCode == selectedChain))
                            {
                                <option value="@brand.brands">@brand.brands</option>
                            }
                        </select>
                    </div>
                    <div style="width: 30px"></div>
                    <div style="width:fit-content; white-space: nowrap;height: auto; display: flex; flex-direction: column;">
                        <button class="clear-button" @onclick="ClearDropDown">
                            Clear Filter
                        </button>
                    </div>

                </div>

            </div>
        </div>
        <br />

        @if (CanDisplayData)
        {
            <br />
            <div style="display:flex;justify-content:space-between;" class="col-span-2">
                <div class="col-span-1" style="width: 30%">
                    <input style="width:100%" id="search_input" name="search_input" type="text" placeholder="Search for Branch Code and Branch Name..." @bind="searchInput" @oninput="FilterRecords" />
                </div>
                <button class="remove-selected-button" @onclick="ConfirmBeforeRemoving">
                    <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" class="ionicon" viewBox="0 0 512 512"><path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" /><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352" /><path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" /></svg> Remove All
                </button>
            </div>
            <br />


            @if (allStoreClass != null)
            {

                <table style="width: 100%; border-collapse: collapse; text-align: left;">
                    <thead>
                        <tr style="background-color: #f2f2f2; border-bottom: 1px solid #ddd;">
                            <th style="padding: 10px; width: 5%;"></th>
                            <th style="padding: 10px; width: 15%;">Branch Code</th>
                            <th style="padding: 10px; width: 40%;">Branch Name</th>
                            <th style="padding: 10px; width: 10%;">Brand</th>
                            <th style="padding: 10px; width: 10%;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (selectedCategory != null)
                        {
                            @foreach (var branch in paginatedAllStoreClass)
                            {
                                @if (branch.brands == selectedCategory)
                                {
                                    <tr style="border-bottom: 1px solid #ddd;">
                                        <td style="padding: 10px;"></td>
                                        <td style="padding: 10px;">@branch.branchCode</td>
                                        <td style="padding: 10px;">@branch.branchName</td>
                                        <td style="padding: 10px;">@branch.brands</td>
                                        <td style="padding: 10px;">
                                            <button class="remove-button" @onclick="() => RemoveBranchClass(branch.branchCode, branch.branchName, branch.brands)">
                                                <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" class="ionicon" viewBox="0 0 512 512">
                                                    <path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320"
                                                          fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />
                                                    <path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352" />
                                                    <path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224"
                                                          fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />
                                                </svg>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                        else
                        {
                            @foreach (var branch in paginatedAllStoreClass)
                            {
                                <tr style="border-bottom: 1px solid #ddd;">
                                    <td style="padding: 10px;"></td>
                                    <td style="padding: 10px;">@branch.branchCode</td>
                                    <td style="padding: 10px;">@branch.branchName</td>
                                    <td style="padding: 10px;">@branch.brands</td>
                                    <td style="padding: 10px;">
                                        <button class="remove-button" @onclick="() => RemoveBranchClass(branch.branchCode, branch.branchName, branch.brands)">
                                            <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" class="ionicon" viewBox="0 0 512 512">
                                                <path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320"
                                                      fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />
                                                <path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352" />
                                                <path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224"
                                                      fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" />
                                            </svg>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="col-span-2">
                    <div class="pagination">
                        <select class="select-size" @bind="pageSize" @oninput="PageSizeChanged">

                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        @if (currentPage <= 1)
                        {
                            <button class="pagination-prev" @onclick="() => ChangePage(currentPage - 1)" disabled>
                                <svg class="icon-prev" viewBox="0 0 64 74" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7.35169 27.7144L45.1028 3.73919C52.4262 -0.911806 62 4.34935 62 13.0248L62 60.9752C62 69.6507 52.4262 74.9118 45.1028 70.2608L7.35171 46.2857C0.547947 41.9647 0.547935 32.0353 7.35169 27.7144Z" stroke="#00A3AD" fill="#00A3AD" stroke-width="4" />
                                </svg>
                            </button>
                        }
                        else
                        {
                            <button class="pagination-prev" @onclick="() => ChangePage(currentPage - 1)">
                                <svg class="icon-prev" viewBox="0 0 64 74" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7.35169 27.7144L45.1028 3.73919C52.4262 -0.911806 62 4.34935 62 13.0248L62 60.9752C62 69.6507 52.4262 74.9118 45.1028 70.2608L7.35171 46.2857C0.547947 41.9647 0.547935 32.0353 7.35169 27.7144Z" stroke="#00A3AD" stroke-width="4" />
                                </svg>
                            </button>
                        }
                        @* <label>Page @currentPage of @totalPages</label> *@
                        @foreach (int i in GetPagesToDisplay(totalPages, currentPage))
                        {
                            if (i == -1)
                            {
                                <span style="width: 30px; height: 30px; margin-left: 10px;">...</span>
                            }
                            else
                            {
                                <button @onclick="() => SelectPage(i)" class="@(i == currentPage ? "active" : "") pagination-number ">
                                    @i
                                </button>
                            }
                        }
                        @if (currentPage >= totalPages)
                        {
                            <button class="pagination-next" @onclick="() => ChangePage(currentPage + 1)" disabled>
                                <svg class="icon-next" viewBox="0 0 64 74" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M56.6483 46.2857L18.8972 70.2608C11.5738 74.9118 2 69.6507 2 60.9752L2 13.0248C2 4.34935 11.5738 -0.911817 18.8972 3.73917L56.6483 27.7143C63.452 32.0353 63.4521 41.9647 56.6483 46.2857Z" stroke="#00A3AD" fill="#00A3AD" stroke-width="4" />
                                </svg>
                            </button>
                        }
                        else
                        {
                            <button class="pagination-next" @onclick="() => ChangePage(currentPage + 1)">
                                <svg class="icon-next" viewBox="0 0 64 74" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M56.6483 46.2857L18.8972 70.2608C11.5738 74.9118 2 69.6507 2 60.9752L2 13.0248C2 4.34935 11.5738 -0.911817 18.8972 3.73917L56.6483 27.7143C63.452 32.0353 63.4521 41.9647 56.6483 46.2857Z" stroke="#00A3AD" stroke-width="4" />
                                </svg>
                            </button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<Modal @ref="modal"
        ModalTitle="Add Branch" 
        ModalBody="@ModalBodyContent">
</Modal>
<MoveModal @ref="ConfirmationMove"
           storeCodeToDelete="@storeCodeToDelete"
           OnConfirm="UpdateStoreClassification"
           OnCancel="HandleCancel"
           ModalBody="@ModalBodyContent">
</MoveModal>
<RemoveModal @ref="ConfirmationRemove"
             storeCodeToDelete="@storeCodeToDelete"
             OnConfirm="RemoveStoreClass"
             ModalBody="@ModalBodyContent">
</RemoveModal>

<MassRemoveStoreModal @ref="ConfirmMassRemoveModal"
            OnConfirm="RemoveAllStores" 
            ModalBody="@ModalBodyContent">
</MassRemoveStoreModal>



@code
{
    private string originalClassId;
    private bool isLoading = false, buttonState = false;
    private string? errorMessage, selectedClass, selectedType, selectedChain, newItem;
    private string? selectedAStore, selectedBranchName, selectedBranchCode, selectedClassification;
    private string? selectedCategory { get; set; }
    private DateTime dateNow = DateTime.Now;
    private List<ItemMaintenance> itemMaintenances = new List<ItemMaintenance>();
    private List<StoreClassification> classifications = new List<StoreClassification>();
    private List<BrandClassification> allbrands = new List<BrandClassification>();

    private List<BranchMaintenance> allStoreClass = new List<BranchMaintenance>();
    private List<BranchMaintenance> allbrandsperchain = new List<BranchMaintenance>();

    private bool isAddingNewItem = false;
    private string selectedStoreClassification;
    private MoveModal ConfirmationMove;
    private RemoveModal ConfirmationRemove;
    private MassRemoveStoreModal ConfirmMassRemoveModal;
    List<tempAdd> tempAddList = new List<tempAdd>();
    private List<BranchMaintenance> filteredAllStoreClasstemp = null;
    // Declare brandChoices as a list of strings
    private List<string> brandChoices = new List<string>();

    private int totalPages;
    private int currentPage = 1;
    private int pageSize = 10;
    private string? searchInput = "";
    private List<BranchMaintenance>? filteredAllStoreClass = new List<BranchMaintenance>();
    private List<BranchMaintenance>? paginatedAllStoreClass = new List<BranchMaintenance>();

    private bool CanDisplayData { get; set; } = false;
    private ElementReference fileInput;
    private string currentClass;
    private bool PerStoreClass { get; set; } = false;
    private string storeCodeToDelete;


    private async Task ChangePage(int page)
    {
        currentPage = page;
        totalPages = (int)Math.Ceiling((double)filteredAllStoreClass.Count / pageSize);
        paginatedAllStoreClass = filteredAllStoreClass.Skip((page - 1) * pageSize).Take(pageSize).ToList();
        StateHasChanged();
    }

    private IEnumerable<int> GetPagesToDisplay(int totalPages, int currentPage)
    {
        const int pagesToShow = 5;

        if (totalPages <= pagesToShow)
        {
            return Enumerable.Range(1, totalPages);
        }

        var pages = new List<int>();

        // Add the first two pages
        pages.Add(1);
        if (totalPages > 2)
        {
            pages.Add(2);
        }

        // Add a separator if necessary
        if (currentPage > 4)
        {
            pages.Add(-1); // -1 represents the "..." separator
        }

        // Add the current page and its neighbors
        var start = Math.Max(3, currentPage - 1);
        var end = Math.Min(totalPages - 2, currentPage + 1);
        for (int i = start; i <= end; i++)
        {
            pages.Add(i);
        }

        // Add a separator if necessary
        if (currentPage < totalPages - 3)
        {
            pages.Add(-1); // -1 represents the "..." separator
        }

        // Add the last two pages
        if (totalPages > 1)
        {
            pages.Add(totalPages - 1);
        }
        pages.Add(totalPages);

        return pages;
    }
    private async Task ConfirmBeforeRemoving()
    {
        ConfirmMassRemoveModal.OpenModal();
    }
    private void PageSizeChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse((e.Value as string)?.Trim());
        currentPage = 1;
        ChangePage(1);
    }

    // remove specific chain and branch
    private async Task RemoveAllStores(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                string removeAllSql = "";

                if (!string.IsNullOrEmpty(selectedCategory))
                {
                    removeAllSql = $@"INSERT INTO excluded_brands (chainCode, branchName, brands, branchCode)
                                    SELECT a.chainCode, a.branchName, b.brands, a.branchCode
                                    FROM nbfibranchmaintenance a 
                                    JOIN nbfibrandsandbranch b ON a.chainCode = b.chainCode
                                    WHERE a.chainCode = '{selectedChain}'
                                      AND b.brands = '{selectedCategory}'  -- Exclude only this specific brand
                                      AND NOT EXISTS (
                                          SELECT 1
                                          FROM excluded_brands e
                                          WHERE e.chainCode = a.chainCode
                                            AND e.branchName = a.branchName
                                            AND e.brands = b.brands
                                            AND e.branchCode = a.branchCode
                                      )
                                      AND a.branchCode NOT LIKE '%000';
                                    ";

                }
                else
                {

                    removeAllSql = $@"INSERT INTO excluded_brands (chainCode, branchName, brands, branchCode)
                                    SELECT a.chainCode, a.branchName, b.brands, a.branchCode
                                    FROM nbfibranchmaintenance a
                                    JOIN nbfibrandsandbranch b ON a.chainCode = b.chainCode
                                    WHERE a.chainCode = '{selectedChain}'
                                      AND NOT EXISTS (
                                          SELECT 1
                                          FROM excluded_brands e
                                          WHERE e.chainCode = a.chainCode
                                            AND e.branchName = a.branchName
                                            AND e.brands = b.brands
                                            AND e.branchCode = a.branchCode
                                      )
                                      AND a.branchCode NOT LIKE '%000';
                                    ";
                }

                await _data.SaveData(removeAllSql, new { }, Configuration.GetConnectionString("DefaultConnection"));

                // Console.WriteLine($"SQL: {removeAllSql}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Remove Error: {ex.Message}");
            }
            StateHasChanged();
            await CheckAndDisplayData();
        }
    }

    private async Task SelectPage(int selectedPage)
    {
        await ChangePage(selectedPage);
    }

    private async Task FilterRecords(ChangeEventArgs e)
    {
        string searchTerm = (string)e.Value;
        await FilterRecordsBySearchTerm(searchTerm);
    }

    // filtering by searching
    private async Task FilterRecordsBySearchTerm(string searchTerm)
    {
        Console.WriteLine($"Filtering by chainCode:{selectedChain}");

        foreach (var it in allStoreClass)
        {
            Console.WriteLine($"{it.chainCode}");
        }
        if (!string.IsNullOrEmpty(searchTerm))
        {
            if (filteredAllStoreClasstemp == null)
                filteredAllStoreClass = allStoreClass.Where(pdf => pdf.branchCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || pdf.branchName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            if (!string.IsNullOrEmpty(selectedCategory))
            {
                filteredAllStoreClass = allStoreClass.Where(item => item.brands == selectedCategory).ToList();
            }
            else
            {
                filteredAllStoreClass = allStoreClass.Where(item => item.chainCode == selectedChain).ToList();
            }
        }
        await ChangePage(1);
        StateHasChanged();
    }

    public class SheetData
    {
        public string FileName { get; set; }
        public string SheetName { get; set; }
        public List<List<object>> CellValue { get; set; }
        public string MonthName { get; set; }
    }

    private async Task ShowFileDialog()
    {
        await fileInput.FocusAsync(); // Show file dialog for user to select a file
    }

    List<SheetData> sheetDataList = new List<SheetData>();
    async Task HandleFileChangeSol(InputFileChangeEventArgs e)
    {
        sheetDataList = await ImportExcelFile(e);
        await UploadBranchMaintenance();
        StateHasChanged();
    }
    
    // uploading a excel
    async Task<List<SheetData>> ImportExcelFile(InputFileChangeEventArgs e)
    {
        List<SheetData> sheetDataList = new List<SheetData>();

        foreach (var file in e.GetMultipleFiles(1))
        {
            using (MemoryStream ms = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 1024 * 2000).CopyToAsync(ms);
                ms.Position = 0;

                string fileName = file.Name; // Get the file name

                // Determine the Excel format (XLS or XLSX) based on the file extension
                string fileExtension = Path.GetExtension(file.Name).ToLower();
                IWorkbook workbook;
                if (fileExtension == ".xls")
                {
                    workbook = new HSSFWorkbook(ms); // For XLS files
                }
                else if (fileExtension == ".xlsx")
                {
                    workbook = new XSSFWorkbook(ms); // For XLSX files
                }
                else
                {
                    Console.WriteLine($"{fileName} is not Excel File");
                    continue;
                }
                ISheet sheet = workbook.GetSheetAt(0);
                var sheetData = new SheetData();
                sheetData.FileName = fileName; // Set the file name
                sheetData.SheetName = sheet.SheetName;
                sheetData.CellValue = new List<List<object>>();

                Console.WriteLine($"Processing sheet: {sheetData.SheetName} from file: {fileName}");

                for (int row = 0; row <= sheet.LastRowNum; row++)
                {
                    IRow currentRow = sheet.GetRow(row);
                    if (currentRow != null)
                    {
                        List<object> rowData = new List<object>();
                        for (int col = 0; col < currentRow.LastCellNum; col++)
                        {

                            ICell cell = currentRow.GetCell(col);
                            if (cell != null)
                            {
                                string cellValue = cell.ToString();
                                rowData.Add(cell.ToString());
                            }
                            else
                            {
                                rowData.Add(null);
                            }
                        }
                        sheetData.CellValue.Add(rowData);
                    }
                }
                sheetDataList.Add(sheetData);
            }
        }
        return sheetDataList;
    }
    private string? sheetChain, sheetBranchName, sheetBranchCode, sheetBrand;
    // process the uploaded excel
    private async Task UploadBranchMaintenance()
    {
        Console.WriteLine("Upload Branch Maintenance method triggered.");

        try
        {
            if (sheetDataList == null || !sheetDataList.Any())
            {
                Console.WriteLine("No data in sheetDataList.");
                return;
            }

            foreach (var data in sheetDataList)
            {
                if (data.CellValue == null || !data.CellValue.Any())
                {
                    Console.WriteLine("CellValue is null.");
                    continue; // Skip to the next data item
                }

                foreach (var row in data.CellValue)
                {
                    int cellCount = 0;
                    sheetChain = sheetBranchCode = sheetBranchName = sheetBrand = null;

                    foreach (var cell in row)
                    {
                        cellCount++;

                        switch (cellCount)
                        {
                            case 1:
                                sheetChain = cell.ToString();
                                break;
                            case 2:
                                sheetBranchCode = cell.ToString();
                                break;
                            case 3:
                                sheetBranchName = cell.ToString();
                                break;
                            case 4:
                                sheetBrand = cell.ToString();
                                break;
                        }
                    }

                    if (!string.IsNullOrEmpty(sheetBranchCode) &&
                        !string.IsNullOrEmpty(sheetBranchName) &&
                        !string.IsNullOrEmpty(sheetChain) &&
                        !string.IsNullOrEmpty(sheetBrand))
                    {
                        var sheetQuery = $@"START TRANSACTION;
                                            -- Delete the item from excluded_brands if it exists
                                            DELETE FROM excluded_brands
                                            WHERE chainCode = '{sheetChain}'
                                              AND branchCode = '{sheetBranchCode}'
                                              AND brands = '{sheetBrand}';

                                            -- Insert into nbfibranchmaintenance if the item does not exist
                                            INSERT INTO nbfibranchmaintenance (chainCode, company, branchCode, branchName, status)
                                            SELECT '{sheetChain}', '', '{sheetBranchCode}', '{sheetBranchName}', 'Active'
                                            WHERE NOT EXISTS (
                                                SELECT 1 FROM nbfibranchmaintenance
                                                WHERE chainCode = '{sheetChain}'
                                                  AND branchCode = '{sheetBranchCode}'
                                            );

                                            COMMIT;
                                            ";

                        var logsSQL = $@"INSERT INTO nbfi_store_logs (chain, category, branchClass, branchCode, branchName, classFrom, classTo, updated_By, updated_Date)
                                        VALUES ('{sheetChain}', '{sheetBrand}', '{sheetBrand.ToLower()}classification', '{sheetBranchCode}', '{sheetBranchName}', 'Excel Upload', 'NONE', 'excel user', '{dateNow}')";

                        try
                        {
                            await _data.SaveData(sheetQuery, new { }, Configuration.GetConnectionString("DefaultConnection"));
                            await _data.SaveData(logsSQL, new { }, Configuration.GetConnectionString("DefaultConnection"));
                            Console.WriteLine($"Sheet Query Executed: {sheetQuery}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error executing query: {ex.Message}");
                            // Log the error with more details for debugging
                        }
                    }
                    else
                    {
                        Console.WriteLine("Required data missing. Skipping row.");
                        Console.WriteLine($"Debug Info: Chain={sheetChain}, Brand={sheetBrand}, BranchCode={sheetBranchCode}");
                    }
                }

                Console.WriteLine("Successfully uploaded data for this data item.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Upload Branch Maintenance: {ex.Message}");
            // Log the error with more details for debugging
        }
        StateHasChanged();
        await CheckAndDisplayData();
    }

    // fetching of brand
    private async Task GetBrands()
    {
        try
        {
            string getall = $@"SELECT * FROM nbfibrandsandbranch";
            allbrandsperchain = await _data.LoadData<BranchMaintenance, dynamic>(getall, new { }, Configuration.GetConnectionString("DefaultConnection"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    private void HandleCancel()
    {
        selectedAStore = null;
        StateHasChanged();
    }

    // updating the specific Store
    private async Task UpdateStoreClassification(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                // Update query for setting the classification
                string updatequery = $@"UPDATE storeclassification
                                    SET classification = '{selectedAStore}'
                                    WHERE branchName = '{selectedBranchName}'";

                var parameters = new { branchName = selectedBranchName };

                await _data.SaveData(updatequery, new { }, Configuration.GetConnectionString("DefaultConnection"));

                // Logging the update
                string logsSql = $@"INSERT INTO nbfi_store_logs (chain, category, branchClass, branchCode, branchName, classFrom, classTo, updated_By, updated_Date)
                                VALUES ('{selectedChain}', '{selectedCategory}', '{selectedCategory.ToLower()} classification', '{selectedBranchCode}', '{selectedBranchName}', '{currentClass}', '{selectedAStore}', 'None', '{dateNow}')";

                await _data.SaveData(logsSql, new { }, Configuration.GetConnectionString("DefaultConnection"));

                await CheckAndDisplayData();
                Console.WriteLine($"Update SQL: {updatequery}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Update: {ex.Message}");
            }
        }
        else
        {
            // Reset to the original state by refetching data
            await CheckAndDisplayData();
            selectedAStore = null;
        }

        // Notify the UI to update
        StateHasChanged();
    }

    // removing the branch
    private void RemoveBranchClass(string branchCode, string branchName, string currentBrand)
    {
        selectedBranchCode = branchCode;
        selectedBranchName = branchName;
        currentClass = currentBrand;
        storeCodeToDelete = $"Are you sure you want to remove the {branchCode} - {branchName}?";
        ConfirmationRemove.OpenModal();
    }

    // removing store class
    private async Task RemoveStoreClass(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                // Update query for setting classification to ''
                string updateQuery = $@"INSERT INTO excluded_brands (chainCode, branchName, brands, branchCode)
                                    VALUES ('{selectedChain}', @branchName, @currentBrand, @branchCode);";

                var parameters = new
                {
                    branchCode = selectedBranchCode,
                    chainCode = selectedChain,
                    branchName = selectedBranchName,
                    currentBrand = currentClass,
                };

                // Execute the update query
                await _data.SaveData(updateQuery, parameters, Configuration.GetConnectionString("DefaultConnection"));

                // Insert log query
                string logsSql = @"INSERT INTO nbfi_store_logs (chain, category, branchCode, branchName, classFrom, classTo, updated_By, updated_Date)
                               VALUES (@chain, @category, @branchCode, @branchName, @classFrom, @classTo, @updatedBy, @updatedDate)";

                var logParameters = new
                {
                    chain = selectedChain,
                    category = selectedCategory,
                    branchCode = selectedBranchCode,
                    branchName = selectedBranchName,
                    classFrom = currentClass,
                    classTo = string.Empty,
                    updatedBy = "None", // Replace with the actual user, if applicable
                    updatedDate = dateNow
                };

                // Execute the logs insertion query
                await _data.SaveData(logsSql, logParameters, Configuration.GetConnectionString("DefaultConnection"));

                // Refresh the data
                await CheckAndDisplayData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Update: {ex.Message}");
            }
        }
        else
        {
            // Reset to the original state by refetching data
            await CheckAndDisplayData();
        }
        StateHasChanged();
        await CheckAndDisplayData();
    }

    // get all store class
    private async Task GetAllStoreClass()
    {
        try
        {
            string getall = $@"SELECT a.chainCode, a.branchName, b.brands, a.branchCode
                                FROM nbfibranchmaintenance a
                                JOIN nbfibrandsandbranch b ON a.chainCode = b.chainCode
                                WHERE a.chainCode = '{selectedChain}'
                                    AND NOT EXISTS (
                                        SELECT 1
                                        FROM excluded_brands e
                                        WHERE e.chainCode = a.chainCode
                                        AND e.branchName = a.branchName
                                        AND e.brands = b.brands
                                        AND e.branchCode = a.branchCode
                                    )
                                    AND a.status = 'Active'
                                    AND a.branchCode NOT LIKE '%000';";
            allStoreClass = await _data.LoadData<BranchMaintenance, dynamic>(getall, new { }, Configuration.GetConnectionString("DefaultConnection"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error All: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    
    private async Task OnChainChanged(ChangeEventArgs e)
    {
        selectedChain = e.Value.ToString();
        Console.WriteLine($"selectedChain: {selectedChain}");
        await GetBrands();

        // Check and fetch the data again based on the new chain
        await CheckAndDisplayData();
    }

    private async Task OnBrandChange(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        Console.WriteLine($"selectedCategory: {selectedCategory}");

        PerStoreClass = true;
        await CheckAndDisplayData();
    }


    private async Task CheckAndDisplayData()
    {
        if (!string.IsNullOrEmpty(selectedChain))
        {
            CanDisplayData = string.IsNullOrEmpty(selectedCategory);
            PerStoreClass = !CanDisplayData;

            if (!string.IsNullOrEmpty(selectedCategory))
            {
                CanDisplayData = string.IsNullOrEmpty(selectedClass);
                PerStoreClass = CanDisplayData;
                await GetAllStoreClass();
                await FilterRecordsBySearchTerm(searchInput);

            }
            else
            {
                await GetAllStoreClass();
                await FilterRecordsBySearchTerm(searchInput);

            }
        }
        else
        {
            CanDisplayData = false;
            PerStoreClass = false;
        }
    }


    private Modal modal;
    private RenderFragment ModalBodyContent => builder =>
    {
        builder.OpenElement(0, "p");
        builder.AddContent(1, "Modal body text.");
        builder.CloseElement();
    };
    private void OpenModal()
    {
        modal.OpenModal();
    }


    private List<tempAdd> tempbranch = new List<tempAdd>();


    // Method that handles the file input change (Excel upload)

    // Method to update the database for each branch
    private async Task UpdateBranchInDatabase(string selectedClass, string selectedBranch)
    {
        string updateQuery = @"
        UPDATE storeclassification
        SET classification = @SelectedClass
        WHERE branchName = @SelectedBranch";

        var parameters = new
        {
            SelectedClass = selectedClass,
            SelectedBranch = selectedBranch
        };

        await _data.LoadData<dynamic, dynamic>(updateQuery, parameters, Configuration.GetConnectionString("DefaultConnection"));
    }

    private async Task Template()
    {

        using (var workbook = new XSSFWorkbook())
        {
            var sheet = workbook.CreateSheet("Template");

            // Creating header
            var headerRow = sheet.CreateRow(0);
            headerRow.CreateCell(0).SetCellValue("Chain");
            headerRow.CreateCell(1).SetCellValue("Branch Code");
            headerRow.CreateCell(2).SetCellValue("Branch Name");
            headerRow.CreateCell(3).SetCellValue("Brand");

            var row = sheet.CreateRow(1);  // Data starts from the second row
            row.CreateCell(0).SetCellValue("WDS");
            row.CreateCell(1).SetCellValue("C-WDS012");
            row.CreateCell(2).SetCellValue("W DEPT STORE STA. ROSA");
            row.CreateCell(3).SetCellValue("NATALIA");

            using (var stream = new MemoryStream())
            {

                workbook.Write(stream);
                var byteArray = stream.ToArray();
                var fileName = $"Store_Maintenance.xlsx";

                // Convert to base64 and trigger download via JS Interop
                await IJSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, new DotNetStreamReference(stream: new MemoryStream(byteArray)));
            }

        }
    }
    private async Task ClearDropDown()
    {
        await IJSRuntime.InvokeVoidAsync("window.location.reload");
    }
}
