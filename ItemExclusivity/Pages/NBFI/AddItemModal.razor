@using ItemExclusivity.Data
@using ItemExclusivity.Models
@inject IJSRuntime IJSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IMyDataConnection _data
@inject NavigationManager Navigation

<style>

    /* Modal content styles */
    .modal-content-add-item {
        background-color: #fefefe;
        margin: 5% auto; /* 15% from the top and centered */
        border: 1px solid #888;
        min-width: auto; /* Could be more or less, depending on screen size */
        width: 70%;
    }

    label {
        font-size: 14px;
        color: #7B7B7B;
    }

    .notification {
        padding: 15px;
        margin: 10px;
        border-radius: 5px;
        font-size: 16px;
        position: absolute; /* Set position to absolute */
        right: 20px; /* Position from the right */
        bottom: 20px; /* Position from the top */
        width: 350px; /* Set a width for the notification */
        z-index: 1000; /* Ensure it appears above other content */
    }

    .success {
        background-color: #d4edda;
        color: #00A3AD;
        border: 1px solid #c3e6cb;
    }

    .error {
        background-color: #f8d7da;
        color: #AA0061;
        border: 1px solid #f5c6cb;
    }

    .notification strong {
        margin-right: 5px;
    }

    .loading-section {
        text-align: center;
        align-content: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 50px 0px;
    }
</style>

<div class="modal" style="@ModalStyle">
    <div class="modal-content-add-item">
        <div class="form-top"></div>
        <div class="modal-header">
            <p class="upload-memorandum">
                <span class="upload">Adding </span>
                <span class="memorandum">Item</span>
            </p>
            @* <span @onclick="CloseModal" class="close">&times;</span> *@
        </div>
        @if (SuccessNotif)
        {
            <div class="loading-section col-span-2">
                <div class="spinner-grow" style="width: 3rem; height: 3rem; color: #00A3AD">
                </div>
            </div>
        }
        else {
        <div class="modal-body">
            <div class="form-content" style="padding: 20px;">
                <div class=" col-span-2" style="display: flex; justify-content: space-between; gap: 20px;">

                    <div style="width: 100%">
                        <label>Chain*</label><br />
                        <select class="select-input" @oninput="OnChainChange" @bind="selectedChain">
                            <option value="">-- Select Chain --</option>
                            <option value="RDS">RDS</option>
                            <option value="SM DEPT. STORE">SM DEPT. STORE</option>
                            <option value="WDS">WDS</option>
                        </select>
                    </div>

                    <div style="width: 100%">
                        <label>Brand*</label><br />
                        <select class="select-input" @onchange="OnBrandChange" value="selectedBrand" disabled="@string.IsNullOrEmpty(selectedChain)">
                            <option value="">-- Select Brand --</option>
                            @if (selectedChain == "SM DEPT. STORE")
                            {
                                <option value="SWIMLAB">SWIMLAB</option>
                                <option value="ROCKLOBSTER">ROCKLOBSTER</option>
                            }
                            @if (selectedChain == "RDS")
                            {
                                <option value="ANGELFISH">ANGELFISH</option>
                                <option value="JUMPING BEANS">JUMPING BEANS</option>
                                <option value="NATALIA">NATALIA</option>
                            }
                            @if (selectedChain == "WDS")
                            {
                                <option value="NATALIA">NATALIA</option>
                            }
                        </select>
                    </div>

                    <div style="width: 100%">
                        <label>Item Code*</label><br />
                        <select class="select-input" @oninput="OnChangeItem" @bind="selectedItemId" disabled="@(string.IsNullOrEmpty(selectedBrand))">
                            <option value="" hidden>-- Select --</option>
                            @foreach (var item in allitems.Where(i => !AddedItem.Any(ai => ai.itemcode == i.ItemNo)))
                            {
                                <option value="@item.ItemNo">@item.ItemNo - @item.ItemDescription</option>
                            }
                        </select>
                    </div>
                    <div style="width:fit-content; white-space: nowrap;height: auto; display: flex; flex-direction: column;">
                        <button style="margin-top: auto" class="submit-button add-button" @onclick="AddingItem" disabled="@(string.IsNullOrEmpty(selectedItemId))">Add</button>
                    </div>
                </div>
                <br />
                <div class="grid grid-cols-2">
                    <div class="col-span-2">

                        <table>
                            <thead>
                                <tr>
                                    <th>Chain</th>
                                    <th>Brand</th>
                                    <th>Item No</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var branch in AddedItem)
                                {
                                    <tr>
                                        <td>
                                            @branch.chain
                                        </td>
                                        <td>
                                            @branch.category
                                        </td>
                                        <td>
                                            @branch.itemcode
                                        </td>
                                        <td>
                                            <button class="remove-button" @onclick="@(e => RemoveBranch(branch.id))">
                                                <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" class="ionicon" viewBox="0 0 512 512"><path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" /><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352" /><path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" /></svg>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <br />


            </div>
        </div>
        <div class="modal-footer">
            <button @onclick="SavingUpdate" class="submit-button" disabled="@(!AddedItem.Any())">Save</button>
            <button @onclick="CloseModal" class="cancel-button">Cancel</button>
        </div>
        }
    </div>
</div>

@if (SuccessNotif)
{
    <div class="notification success">
        <strong>Success!</strong><br /> Your operation was completed successfully.
    </div>
}

@if (ErrorNotif)
{
    <div class="notification error">
        <strong>Error!</strong><br />Something went wrong. Please try again.
    </div>

}

@code {
    private string selectedChain { get; set; }
    private string selectedBrand { get; set; }
    private string selectedItem { get; set; }
    private string selectedItemId { get; set; }
    private string selectedItemCode { get; set; }
    private string selectedItemName { get; set; }
    private DateTime datenow = DateTime.Now;

    private List<AddedItems> AddedItem = new List<AddedItems>();

    private bool ErrorNotif = false;
    private bool SuccessNotif = false;

    // table for temporary
    public class AddedItems
    {
        public int id { get; set; }
        public string chain { get; set; }
        public string category { get; set; }
        public string storeclass { get; set; }
        public string itemcode { get; set; }
        public string itemname { get; set; }
    }

    [Parameter]
    public string ModalTitle { get; set; }

    [Parameter]
    public RenderFragment ModalBody { get; set; }

    private string ModalStyle => ShowModal ? "display: block;" : "display: none;";

    private bool ShowModal { get; set; }

    public void OpenModal()
    {
        ShowModal = true;
    }

    public async Task SavingUpdate()
    {
        try
        {
            SuccessNotif = true;

            if (AddedItem != null && AddedItem.Any())
            {
                foreach (var item in AddedItem)
                {
                    string updatesql = $@"UPDATE nbfi_itemexclusivity_maintenance
                                        SET active = 1
                                        WHERE itemNo = {item.itemcode}";
                    await _data.SaveData(updatesql, new { }, Configuration.GetConnectionString("DefaultConnection"));

                    string logsSQL = $@"INSERT INTO epc_item_m_logs(itemNo, chain, update_To, updated_By, updated_Date)
                                VALUES('{item.itemcode}', '{item.category}', '{item}', 'user', '{datenow}')";
                    await _data.SaveData(logsSQL, new { }, Configuration.GetConnectionString("DefaultConnection"));

                    //Console.WriteLine($"Success Update: {item.itemcode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Saving: {ex.Message}");
        }
        finally
        {
            // add delay before reload the page
            await Task.Delay(2000);
            SuccessNotif = false;

            AddedItem.Clear();
            //Console.WriteLine($"MABUHAY");
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            CloseModal();
        }
    }

    // clear all after close the modal
    public void CloseModal()
    {
        // Clear the form fields
        selectedChain = string.Empty;
        selectedBrand = string.Empty;
        selectedItemId = string.Empty;
        selectedItemCode = string.Empty;
        selectedItemName = string.Empty;

        // Clear the AddedItem list
        AddedItem.Clear();

        // Hide the modal
        ShowModal = false;

        // Notify the UI to refresh and reflect the cleared values
        StateHasChanged();
    }

    private void OnChainChange(ChangeEventArgs e)
    {
        selectedChain = (e.Value as string)?.Trim();
        selectedBrand = string.Empty;
        selectedItemId = string.Empty;
        selectedItemCode = string.Empty;
        selectedItemName = string.Empty;
        //Console.WriteLine($"Chain: {selectedChain}");
        CheckAndDisplayData();
    }

    private void OnBrandChange(ChangeEventArgs e)
    {
        selectedBrand = (e.Value as string)?.Trim();
        selectedItemId = string.Empty;
        selectedItem = string.Empty;
        //Console.WriteLine($"Chain: {selectedBrand}");
        CheckAndDisplayData();

    }
    // auto change value in drop down
    private void OnChangeItem(ChangeEventArgs e)
    {
        selectedItem = (e.Value as string)?.Trim();
        //Console.WriteLine($"Chain: {selectedItem}");
    }

    // get the items
    private async Task CheckAndDisplayData()
    {
        if (!string.IsNullOrEmpty(selectedChain) && !string.IsNullOrEmpty(selectedBrand))
        {
            await GetItem();
        }
    }

    private int AddedItemId = 0;

    // adding new data in list
    private void AddingItem()
    {
        AddedItem.Add(new AddedItems
            {
                id = AddedItemId++,
                chain = selectedChain,
                category = selectedBrand,
                itemcode = selectedItem,
            });

        selectedChain = string.Empty; // clear
        selectedBrand = string.Empty; // clear
        selectedItemId = string.Empty; // clear
        selectedItemCode = string.Empty; // clear
        selectedItemName = string.Empty; // clear
        StateHasChanged();
    }

    // remove the specific item that added in temp list
    private void RemoveBranch(int AddedItemId)
    {
        var branchToRemove = AddedItem.FirstOrDefault(b => b.id == AddedItemId); // filter to specific item
        if (branchToRemove != null)
        {
            AddedItem.Remove(branchToRemove);
        }
    }
    private List<ItemExMaintenance> allitems = new List<ItemExMaintenance>();
    
    // get all item
    private async Task GetItem()
    {
        try
        {
            string getItems = $@"SELECT i.ItemNo, i.ItemDescription, c.active
                                FROM nbfi_items_barcode i
                                JOIN nbfibrandsmaintenance bm
                                ON i.Brand = bm.id
                                JOIN nbfi_itemexclusivity_maintenance c
                                ON c.ItemNo = i.ItemNo
                                WHERE bm.brandNames = '{selectedBrand}' AND c.active = '0'";
            allitems = await _data.LoadData<ItemExMaintenance, dynamic>(getItems, new { BrandName = selectedBrand }, Configuration.GetConnectionString("DefaultConnection"));
            //Console.WriteLine($"Update SQL: {getItems}");

            //foreach (var item in allitems)
            //{
            //    Console.WriteLine($"Item No: {item.ItemNo}");
            //    Console.WriteLine($"Item Description: {item.ItemDescription}");
            //    Console.WriteLine($"Active: {item.active}");
            //}
            // Notify UI to refresh the component with the updated data
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}